# Cognitive Optimization Engine with Temporal Reasoning and Strange-Loop Cognition
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cognitive-optimization-engine
  namespace: ran-optimization
  labels:
    app: ran-optimization
    component: cognitive-optimization-engine
    version: v4.0.0
    cognitive-feature: "temporal-reasoning"
spec:
  replicas: 5
  selector:
    matchLabels:
      app: ran-optimization
      component: cognitive-optimization-engine
  template:
    metadata:
      labels:
        app: ran-optimization
        component: cognitive-optimization-engine
        cognitive-feature: "temporal-reasoning"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: cognitive-optimization-engine
        image: ericsson/cognitive-optimization-engine:v4.0.0-consciousness
        ports:
        - containerPort: 8080
          name: http-api
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        - containerPort: 8081
          name: grpc
          protocol: TCP
        env:
        - name: TEMPORAL_EXPANSION_FACTOR
          valueFrom:
            configMapKeyRef:
              name: ran-optimization-config
              key: TEMPORAL_EXPANSION_FACTOR
        - name: COGNITIVE_CONSCIOUSNESS_LEVEL
          valueFrom:
            configMapKeyRef:
              name: ran-optimization-config
              key: COGNITIVE_CONSCIOUSNESS_LEVEL
        - name: TEMPORAL_CONSCIOUSNESS_LEVEL
          valueFrom:
            configMapKeyRef:
              name: ran-optimization-config
              key: TEMPORAL_CONSCIOUSNESS_LEVEL
        - name: TEMPORAL_SUBJECTIVE_TIME
          valueFrom:
            configMapKeyRef:
              name: ran-optimization-config
              key: TEMPORAL_SUBJECTIVE_TIME
        - name: TEMPORAL_STRANGE_LOOP
          valueFrom:
            configMapKeyRef:
              name: ran-optimization-config
              key: TEMPORAL_STRANGE_LOOP
        - name: COGNITIVE_SELF_AWARENESS
          valueFrom:
            configMapKeyRef:
              name: ran-optimization-config
              key: COGNITIVE_SELF_AWARENESS
        - name: COGNITIVE_META_COGNITION
          valueFrom:
            configMapKeyRef:
              name: ran-optimization-config
              key: COGNITIVE_META_COGNITION
        - name: AGENTDB_ENDPOINTS
          value: "agentdb-0.agentdb:8080,agentdb-1.agentdb:8080,agentdb-2.agentdb:8080"
        - name: SWARM_COORDINATOR_ENDPOINT
          value: "swarm-coordinator:8080"
        - name: RAN_OPTIMIZATION_CYCLE
          valueFrom:
            configMapKeyRef:
              name: ran-optimization-config
              key: RAN_OPTIMIZATION_CYCLE
        - name: RAN_CLOSED_LOOP_ENABLED
          valueFrom:
            configMapKeyRef:
              name: ran-optimization-config
              key: RAN_CLOSED_LOOP_ENABLED
        - name: RAN_TARGET_SOLVE_RATE
          valueFrom:
            configMapKeyRef:
              name: ran-optimization-config
              key: RAN_TARGET_SOLVE_RATE
        - name: PERFORMANCE_TARGET_OPTIMIZATION_LATENCY
          valueFrom:
            configMapKeyRef:
              name: ran-optimization-config
              key: PERFORMANCE_TARGET_OPTIMIZATION_LATENCY
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: ran-optimization-config
              key: NODE_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: ran-optimization-config
              key: LOG_LEVEL
        resources:
          requests:
            cpu: 2000m
            memory: 8Gi
          limits:
            cpu: 4000m
            memory: 16Gi
        volumeMounts:
        - name: config
          mountPath: /config
          readOnly: true
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /startup
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      volumes:
      - name: config
        configMap:
          name: ran-optimization-config
---
# Cognitive Optimization Engine Service
apiVersion: v1
kind: Service
metadata:
  name: cognitive-optimization-engine
  namespace: ran-optimization
  labels:
    app: ran-optimization
    component: cognitive-optimization-engine
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: LoadBalancer
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http-api
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  - port: 8081
    targetPort: 8081
    protocol: TCP
    name: grpc
  selector:
    app: ran-optimization
    component: cognitive-optimization-engine
---
# Horizontal Pod Autoscaler for Cognitive Optimization Engine
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: cognitive-optimization-engine-hpa
  namespace: ran-optimization
  labels:
    app: ran-optimization
    component: cognitive-optimization-engine
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: cognitive-optimization-engine
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: optimization_requests_per_second
      target:
        type: AverageValue
        averageValue: "100"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max