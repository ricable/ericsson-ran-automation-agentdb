apiVersion: v1
kind: ConfigMap
metadata:
  name: ran-automation-config
  namespace: ran-automation
  labels:
    app: ran-automation
    component: config
data:
  NODE_ENV: "production"
  LOG_LEVEL: "info"
  AGENTDB_SYNC_INTERVAL: "5000"
  QUIC_PROTOCOL: "true"
  TEMPORAL_EXPANSION_FACTOR: "1000"
  CLOSED_LOOP_INTERVAL: "900000"
  SWARM_TOPOLOGY: "hierarchical"
  COGNITIVE_CONSCIOUSNESS: "enabled"
  PERFORMANCE_MONITORING: "enabled"
  MEMORY_COORDINATION: "enabled"
  API_RATE_LIMIT: "1000"
  MAX_CONCURRENT_AGENTS: "50"
  SESSION_TIMEOUT: "3600000"

  # Database Configuration
  AGENTDB_HOST: "agentdb-service.ran-automation.svc.cluster.local"
  AGENTDB_PORT: "5432"
  AGENTDB_NAME: "ran_automation_prod"

  # Redis Configuration
  REDIS_HOST: "redis-service.ran-automation.svc.cluster.local"
  REDIS_PORT: "6379"
  REDIS_DB: "0"

  # Monitoring Configuration
  PROMETHEUS_ENDPOINT: "http://prometheus-service.ran-monitoring.svc.cluster.local:9090"
  GRAFANA_ENDPOINT: "http://grafana-service.ran-monitoring.svc.cluster.local:3000"

  # Feature Flags
  FEATURE_TEMPORAL_REASONING: "true"
  FEATURE_STRANGE_LOOP_OPTIMIZATION: "true"
  FEATURE_AGENTDB_VECTOR_SEARCH: "true"
  FEATURE_GITHUB_INTEGRATION: "true"
  FEATURE_FLOW_NEXUS_INTEGRATION: "true"
  FEATURE_MNM_AUTOMATION: "true"

  # Resource Limits
  MAX_MEMORY_USAGE: "8Gi"
  MAX_CPU_USAGE: "4000m"
  MAX_CONCURRENT_REQUESTS: "10000"

  # Security Configuration
  JWT_SECRET_NAME: "ran-jwt-secret"
  TLS_SECRET_NAME: "ran-tls-secret"
  OAUTH_ENABLED: "true"
  RBAC_ENABLED: "true"

  # Backup and Recovery
  BACKUP_ENABLED: "true"
  BACKUP_INTERVAL: "21600000"
  BACKUP_RETENTION_DAYS: "30"
  DISASTER_RECOVERY_ENABLED: "true"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: ran-monitoring
  labels:
    app: prometheus
    component: config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'ran-automation-prod'
        namespace: 'ran-monitoring'

    rule_files:
      - "/etc/prometheus/rules/*.yml"

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093

    scrape_configs:
      - job_name: 'kubernetes-apiservers'
        kubernetes_sd_configs:
          - role: endpoints
        scheme: https
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
          - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
            action: keep
            regex: default;kubernetes;https

      - job_name: 'ran-automation-services'
        kubernetes_sd_configs:
          - role: endpoints
          namespaces:
            names:
              - ran-automation
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            action: replace
            target_label: kubernetes_name

      - job_name: 'node-exporter'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            regex: node-exporter
            action: keep
          - source_labels: [__address__]
            regex: (.*)
            target_label: __address__
            replacement: $1:9100

      - job_name: 'agentdb'
        static_configs:
          - targets: ['agentdb-service.ran-automation.svc.cluster.local:5432']
        metrics_path: /metrics
        scrape_interval: 30s

      - job_name: 'cognitive-performance'
        static_configs:
          - targets: ['cognitive-performance-service.ran-automation.svc.cluster.local:8080']
        metrics_path: /metrics
        scrape_interval: 10s

      - job_name: 'swarm-coordination'
        static_configs:
          - targets: ['swarm-coordination-service.ran-automation.svc.cluster.local:8081']
        metrics_path: /metrics
        scrape_interval: 5s
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: ran-monitoring
  labels:
    app: grafana
    component: dashboards
data:
  ran-automation-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "RAN Automation System Overview",
        "tags": ["ran-automation", "overview"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "System Health",
            "type": "stat",
            "targets": [
              {
                "expr": "up{job=\"ran-automation-services\"}",
                "refId": "A"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "color": {
                  "mode": "thresholds"
                },
                "thresholds": {
                  "steps": [
                    {"color": "red", "value": 0},
                    {"color": "green", "value": 1}
                  ]
                }
              }
            }
          },
          {
            "id": 2,
            "title": "Cognitive Consciousness Level",
            "type": "gauge",
            "targets": [
              {
                "expr": "cognitive_consciousness_level",
                "refId": "A"
              }
            ],
            "fieldConfig": {
              "defaults": {
                "min": 0,
                "max": 100,
                "unit": "percent"
              }
            }
          },
          {
            "id": 3,
            "title": "Agent Performance",
            "type": "graph",
            "targets": [
              {
                "expr": "rate(agent_requests_total[5m])",
                "refId": "A"
              }
            ]
          },
          {
            "id": 4,
            "title": "Temporal Analysis Depth",
            "type": "graph",
            "targets": [
              {
                "expr": "temporal_analysis_depth_factor",
                "refId": "A"
              }
            ]
          }
        ],
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "refresh": "5s"
      }
    }

  swarm-performance.json: |
    {
      "dashboard": {
        "id": null,
        "title": "Swarm Performance Monitoring",
        "tags": ["swarm", "performance"],
        "timezone": "browser",
        "panels": [
          {
            "id": 1,
            "title": "Active Agents",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(swarm_active_agents)",
                "refId": "A"
              }
            ]
          },
          {
            "id": 2,
            "title": "Task Queue Length",
            "type": "graph",
            "targets": [
              {
                "expr": "swarm_task_queue_length",
                "refId": "A"
              }
            ]
          },
          {
            "id": 3,
            "title": "Agent Response Time",
            "type": "graph",
            "targets": [
              {
                "expr": "histogram_quantile(0.95, rate(agent_response_time_seconds_bucket[5m]))",
                "refId": "A"
              }
            ]
          }
        ]
      }
    }