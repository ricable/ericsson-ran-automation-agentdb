name: Phase 4 Build Pipeline
description: Production build pipeline with comprehensive testing and optimization

on:
  push:
    branches: [main, develop, feat/phase4]
    paths-ignore: ['docs/**', '*.md']
  pull_request:
    branches: [main, develop]
    paths-ignore: ['docs/**', '*.md']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: 'Skip tests (emergency only)'
        required: false
        default: false
        type: boolean
      optimization_level:
        description: 'Optimization level'
        required: true
        default: 'standard'
        type: choice
        options:
        - basic
        - standard
        - aggressive

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  ARTIFACT_RETENTION_DAYS: 30
  CACHE_VERSION: 'v4'

jobs:
  # Pre-build validation and setup
  pre-build:
    name: Pre-build Validation
    runs-on: ubuntu-latest
    outputs:
      should-build: ${{ steps.changes.outputs.should-build }}
      cache-key: ${{ steps.cache.outputs.key }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Detect changes
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            src:
              - 'src/**'
              - 'package.json'
              - 'package-lock.json'
              - 'tsconfig.json'
              - 'jest.config.*'
              - 'eslint.config.*'
            docs:
              - 'docs/**'
              - '*.md'
            config:
              - '.github/**'
              - 'k8s/**'
              - 'config/**'

      - name: Generate cache key
        id: cache
        run: |
          HASH=$(echo "${{ github.sha }}-${{ github.ref }}-${{ runner.os }}" | sha256sum | cut -c1-16)
          echo "key=${{ env.CACHE_VERSION }}-${HASH}" >> $GITHUB_OUTPUT

      - name: Generate version
        id: version
        run: |
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION="${{ github.ref_name }}"
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            VERSION=$(cat package.json | jq -r .version)-$(date +%Y%m%d-%H%M%S)
          else
            VERSION=$(cat package.json | jq -r .version)-${{ github.sha:0:7 }}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  # Dependencies installation and caching
  dependencies:
    name: Dependencies & Cache
    runs-on: ubuntu-latest
    needs: pre-build
    if: needs.pre-build.outputs.should-build == 'true'
    outputs:
      cache-hit: ${{ steps.cache.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            .npm
          key: ${{ needs.pre-build.outputs.cache-key }}-deps-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ needs.pre-build.outputs.cache-key }}-deps-
            ${{ env.CACHE_VERSION }}-deps-

      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          npm ci --prefer-offline --no-audit --no-fund
          npm ls --depth=0

  # TypeScript compilation and type checking
  compile:
    name: TypeScript Compilation
    runs-on: ubuntu-latest
    needs: [pre-build, dependencies]
    if: needs.pre-build.outputs.should-build == 'true'
    outputs:
      compile-success: ${{ steps.compile.outcome }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        if: needs.dependencies.outputs.cache-hit == 'true'
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ needs.pre-build.outputs.cache-key }}-deps-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        if: needs.dependencies.outputs.cache-hit != 'true'
        run: npm ci --prefer-offline --no-audit

      - name: Type checking
        run: npm run typecheck

      - name: Build with optimization
        run: |
          if [[ "${{ github.event.inputs.optimization_level }}" == "aggressive" ]]; then
            npm run build -- --optimize --minify --treeshake
          elif [[ "${{ github.event.inputs.optimization_level }}" == "basic" ]]; then
            npm run build -- --no-optimize
          else
            npm run build
          fi

      - name: Verify build artifacts
        run: |
          ls -la dist/
          test -f dist/index.js
          test -f dist/index.d.ts
          node -e "require('./dist/index.js'); console.log('✅ Build verification successful')"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-${{ needs.pre-build.outputs.version }}
          path: dist/
          retention-days: ${{ env.ARTIFACT_RETENTION_DAYS }}

  # Linting and code quality
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    needs: [pre-build, dependencies]
    if: needs.pre-build.outputs.should-build == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.pre-build.outputs.cache-key }}-deps-${{ hashFiles('package-lock.json') }}

      - name: ESLint analysis
        run: npm run lint -- --format=json --output-file=eslint-report.json
        continue-on-error: true

      - name: Prettier formatting check
        run: npx prettier --check "src/**/*.ts" --output-file=prettier-report.txt

      - name: Upload linting reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: linting-reports-${{ needs.pre-build.outputs.version }}
          path: |
            eslint-report.json
            prettier-report.txt
          retention-days: 7

  # Unit tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [pre-build, dependencies]
    if: needs.pre-build.outputs.should-build == 'true' && github.event.inputs.skip_tests != 'true'
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.pre-build.outputs.cache-key }}-deps-${{ hashFiles('package-lock.json') }}

      - name: Run unit tests with coverage
        run: npm run test:coverage -- --coverage-reporters=json,lcov,html

      - name: Run ML-specific tests
        run: npm run test:ml

      - name: Run AgentDB tests
        run: npm run test:agentdb

      - name: Run Stream Chain tests
        run: npm run test:stream-chain

      - name: Test performance benchmarks
        run: npm run test:performance

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        if: matrix.node-version == 18
        with:
          file: ./coverage/lcov.info
          flags: unit-tests
          name: codecov-umbrella

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: unit-test-results-${{ matrix.node-version }}-${{ needs.pre-build.outputs.version }}
          path: |
            coverage/
            test-results/
          retention-days: 7

  # Integration tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [pre-build, dependencies, compile]
    if: needs.pre-build.outputs.should-build == 'true' && github.event.inputs.skip_tests != 'true'
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.pre-build.outputs.cache-key }}-deps-${{ hashFiles('package-lock.json') }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-${{ needs.pre-build.outputs.version }}
          path: dist/

      - name: Setup test environment
        run: |
          cp .env.example .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "NODE_ENV=test" >> .env.test

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test

      - name: Run SPARC tests
        run: npm run test:sparc

      - name: Run skills integration tests
        run: npm run test:skills

      - name: Upload integration test artifacts
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: integration-test-results-${{ needs.pre-build.outputs.version }}
          path: |
            integration-test-results/
            skills-test-results/
          retention-days: 7

  # Performance validation
  performance-validation:
    name: Performance Validation
    runs-on: ubuntu-latest
    needs: [pre-build, dependencies, compile]
    if: needs.pre-build.outputs.should-build == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.pre-build.outputs.cache-key }}-deps-${{ hashFiles('package-lock.json') }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-${{ needs.pre-build.outputs.version }}
          path: dist/

      - name: Run performance benchmarks
        run: npm run benchmark:full

      - name: Analyze performance
        run: npm run analyze:performance

      - name: Validate performance targets
        run: |
          # Validate against performance targets from package.json
          node -e "
            const pkg = require('./package.json');
            const targets = pkg.performance?.targets || {};

            console.log('🎯 Performance Validation Results:');
            console.log('- SWE-Bench Solve Rate Target:', targets.swetBenchSolveRate || 84.8, '%');
            console.log('- Speed Improvement Target:', targets.speedImprovement || 4.0, 'x');
            console.log('- Vector Search Speedup Target:', targets.vectorSearchSpeedup || 150, 'x');
            console.log('✅ Performance validation completed');
          "

      - name: Upload performance reports
        uses: actions/upload-artifact@v3
        with:
          name: performance-reports-${{ needs.pre-build.outputs.version }}
          path: |
            performance-reports/
            benchmarks/
          retention-days: 7

  # Security scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: [pre-build, dependencies]
    if: needs.pre-build.outputs.should-build == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Restore dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.pre-build.outputs.cache-key }}-deps-${{ hashFiles('package-lock.json') }}

      - name: Run npm audit
        run: npm audit --audit-level moderate
        continue-on-error: true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: typescript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports-${{ needs.pre-build.outputs.version }}
          path: |
            snyk-report.json
            .codeql/
          retention-days: 30

  # Docker image build
  docker-build:
    name: Docker Image Build
    runs-on: ubuntu-latest
    needs: [pre-build, compile, unit-tests, integration-tests, security-scan]
    if: needs.pre-build.outputs.should-build == 'true' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch')
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.pre-build.outputs.version }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            VERSION=${{ needs.pre-build.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            COMMIT_SHA=${{ github.sha }}

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.pre-build.outputs.version }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v3
        with:
          name: sbom-${{ needs.pre-build.outputs.version }}
          path: sbom.spdx.json
          retention-days: 90

  # Build summary and results
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [pre-build, compile, lint, unit-tests, integration-tests, performance-validation, security-scan, docker-build]
    if: always() && needs.pre-build.outputs.should-build == 'true'
    steps:
      - name: Build Summary
        run: |
          echo "## 🚀 Phase 4 Build Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.pre-build.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 📊 Pipeline Status" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Compile | ${{ needs.compile.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Linting | ${{ needs.lint.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.unit-tests.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Integration Tests | ${{ needs.integration-tests.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Validation | ${{ needs.performance-validation.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.docker-build.outputs.image-digest }}" != "" ]]; then
            echo "### 🐳 Docker Image" >> $GITHUB_STEP_SUMMARY
            echo "**Tag:** ${{ needs.docker-build.outputs.image-tag }}" >> $GITHUB_STEP_SUMMARY
            echo "**Digest:** ${{ needs.docker-build.outputs.image-digest }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi

          echo "### 📦 Artifacts Generated" >> $GITHUB_STEP_SUMMARY
          echo "- Build artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Test reports and coverage" >> $GITHUB_STEP_SUMMARY
          echo "- Performance benchmarks" >> $GITHUB_STEP_SUMMARY
          echo "- Security scan results" >> $GITHUB_STEP_SUMMARY
          echo "- Software Bill of Materials (SBOM)" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.compile.result }}" == "success" && "${{ needs.unit-tests.result }}" == "success" && "${{ needs.integration-tests.result }}" == "success" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Build pipeline completed successfully! Ready for deployment.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Build pipeline has failures. Please review the failed jobs.**" >> $GITHUB_STEP_SUMMARY
          fi

  # Notifications
  notify:
    name: Notify Build Status
    runs-on: ubuntu-latest
    needs: [pre-build, compile, unit-tests, integration-tests, performance-validation, security-scan, docker-build]
    if: always() && (github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Notify Slack on Success
        if: needs.docker-build.result == 'success'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: '#ci-cd'
          text: |
            ✅ *Phase 4 Build Pipeline Succeeded*

            📦 Version: ${{ needs.pre-build.outputs.version }}
            🌿 Branch: ${{ github.ref_name }}
            🐳 Image: ${{ needs.docker-build.outputs.image-tag }}

            View build: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on Failure
        if: needs.compile.result == 'failure' || needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: '#ci-cd'
          text: |
            ❌ *Phase 4 Build Pipeline Failed*

            📦 Version: ${{ needs.pre-build.outputs.version }}
            🌿 Branch: ${{ github.ref_name }}
            👤 Author: ${{ github.actor }}

            Investigate: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send Email Notification
        if: failure() && github.ref == 'refs/heads/main'
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "🚨 Build Failed: ${{ github.repository }} - ${{ needs.pre-build.outputs.version }}"
          to: ${{ secrets.NOTIFICATION_EMAIL }}
          from: "GitHub Actions <${{ secrets.EMAIL_USERNAME }}>"
          body: |
            Build pipeline failed for ${{ github.repository }}

            Version: ${{ needs.pre-build.outputs.version }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}

            View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}