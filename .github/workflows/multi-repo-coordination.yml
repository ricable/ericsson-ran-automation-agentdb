name: Multi-Repository Coordination

on:
  push:
    branches: [main, develop, 'phase-*']
    paths:
      - 'src/**'
      - 'package.json'
      - 'config/**'
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      coordination_type:
        description: 'Type of coordination'
        required: true
        default: 'sync'
        type: choice
        options:
          - sync
          - deploy
          - rollback
          - update
      target_repos:
        description: 'Target repositories (comma-separated)'
        required: false
        default: 'ericsson-ran-automation,ericsson-ran-intelligence,ericsson-ran-cognitive'
      force_update:
        description: 'Force update across repos'
        required: false
        default: false
        type: boolean

env:
  COORDINATION_NAMESPACE: ericsson-ran-automation
  SYNC_TIMEOUT: 600
  MAX_PARALLEL_REPOS: 5

jobs:
  # Multi-repository discovery and analysis
  repo-discovery:
    name: Repository Discovery & Analysis
    runs-on: ubuntu-latest
    outputs:
      repos-json: ${{ steps.discover.outputs.repos }}
      sync-status: ${{ steps.discover.outputs.status }}
      affected-repos: ${{ steps.discover.outputs.affected }}
    steps:
      - name: Discover Ericsson RAN Repositories
        id: discover
        run: |
          # Core Ericsson RAN automation repositories
          repos='[
            {
              "name": "ericsson-ran-automation",
              "url": "github.com/ericsson-ran-automation/ericsson-ran-automation",
              "type": "core",
              "priority": "critical",
              "dependencies": ["ericsson-ran-intelligence", "ericsson-ran-cognitive"]
            },
            {
              "name": "ericsson-ran-intelligence",
              "url": "github.com/ericsson-ran-automation/ericsson-ran-intelligence",
              "type": "intelligence",
              "priority": "high",
              "dependencies": ["ericsson-ran-automation"]
            },
            {
              "name": "ericsson-ran-cognitive",
              "url": "github.com/ericsson-ran-automation/ericsson-ran-cognitive",
              "type": "cognitive",
              "priority": "high",
              "dependencies": ["ericsson-ran-automation", "ericsson-ran-intelligence"]
            },
            {
              "name": "ericsson-ran-agentdb",
              "url": "github.com/ericsson-ran-automation/ericsson-ran-agentdb",
              "type": "database",
              "priority": "high",
              "dependencies": ["ericsson-ran-automation"]
            },
            {
              "name": "ericsson-ran-deployment",
              "url": "github.com/ericsson-ran-automation/ericsson-ran-deployment",
              "type": "deployment",
              "priority": "medium",
              "dependencies": ["ericsson-ran-automation", "ericsson-ran-cognitive"]
            }
          ]'

          # Parse target repos from input or use defaults
          if [ "${{ github.event.inputs.target_repos }}" != "" ]; then
            IFS=',' read -ra TARGET_REPOS <<< "${{ github.event.inputs.target_repos }}"
            affected_repos=$(echo "$repos" | jq -c --arg repos "${TARGET_REPOS[*]}" '
              map(select(.name as $repo | $repos | contains($repo)))
            ')
          else
            affected_repos="$repos"
          fi

          # Check repository status
          status="ready"
          for repo in $(echo "$affected_repos" | jq -r '.[].name'); do
            echo "Checking status of $repo..."
            # Add actual repo status checking logic here
          done

          echo "repos=$repos" >> $GITHUB_OUTPUT
          echo "status=$status" >> $GITHUB_OUTPUT
          echo "affected=$affected_repos" >> $GITHUB_OUTPUT

      - name: Store Coordination Context
        run: |
          echo '${{ steps.discover.outputs.repos }}' > repos-context.json
          echo '${{ steps.discover.outputs.affected }}' > affected-repos.json

  # Dependency analysis and conflict detection
  dependency-analysis:
    name: Dependency Analysis & Conflict Detection
    runs-on: ubuntu-latest
    needs: repo-discovery
    if: needs.repo-discovery.outputs.sync-status == 'ready'
    outputs:
      conflicts: ${{ steps.analyze.outputs.conflicts }}
      sync-plan: ${{ steps.analyze.outputs.plan }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install coordination tools
        run: |
          npm install -g claude-flow@alpha
          npm install semver

      - name: Analyze cross-repository dependencies
        id: analyze
        run: |
          repos='${{ needs.repo-discovery.outputs.affected-repos }}'

          # Create dependency graph
          cat > dependency-graph.json << EOF
          {
            "repositories": $repos,
            "dependency_matrix": {},
            "conflicts": [],
            "sync_plan": {
              "phase_order": ["core", "database", "intelligence", "cognitive", "deployment"],
              "parallel_groups": [
                ["ericsson-ran-intelligence", "ericsson-ran-agentdb"],
                ["ericsson-ran-cognitive", "ericsson-ran-deployment"]
              ]
            }
          }
          EOF

          # Analyze version compatibility
          conflicts=$(node -e "
            const repos = JSON.parse(process.argv[1]);
            const conflicts = [];

            // Check for version conflicts
            repos.forEach(repo => {
              if (repo.type === 'core') {
                // Core repo changes affect all others
                conflicts.push({
                  type: 'breaking_change',
                  repo: repo.name,
                  impact: 'all',
                  action: 'coordinate'
                });
              }
            });

            console.log(JSON.stringify(conflicts));
          " '$repos')

          echo "conflicts=$conflicts" >> $GITHUB_OUTPUT
          echo "plan=$(cat dependency-graph.json | jq -c .sync_plan)" >> $GITHUB_OUTPUT

      - name: Generate coordination report
        run: |
          cat << EOF > docs/coordination-report-${{ github.run_number }}.md
          # Multi-Repository Coordination Report

          ## Repositories Involved
          \`\`\`json
          ${{ needs.repo-discovery.outputs.affected-repos }}
          \`\`\`

          ## Dependency Analysis
          \`\`\`json
          ${{ steps.analyze.outputs.conflicts }}
          \`\`\`

          ## Synchronization Plan
          \`\`\`json
          ${{ steps.analyze.outputs.plan }}
          \`\`\`

          Generated: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          EOF

  # Parallel repository synchronization
  repo-sync:
    name: Repository Synchronization
    runs-on: ubuntu-latest
    needs: [repo-discovery, dependency-analysis]
    if: needs.repo-discovery.outputs.sync-status == 'ready'
    strategy:
      matrix:
        repo: ${{ fromJson(needs.repo-discovery.outputs.affected-repos) }}
      fail-fast: false
      max-parallel: ${{ env.MAX_PARALLEL_REPOS }}
    steps:
      - name: Setup synchronization environment
        run: |
          npm install -g claude-flow@alpha
          npx claude-flow@alpha memory store \
            --namespace "${{ env.COORDINATION_NAMESPACE }}" \
            --key "sync-${{ matrix.repo.name }}-${{ github.run_number }}" \
            --value '{"status": "starting", "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"}'

      - name: Synchronize ${{ matrix.repo.name }}
        run: |
          echo "Synchronizing ${{ matrix.repo.name }} (${{ matrix.repo.type }})"

          # Initialize cognitive coordination
          npx claude-flow@alpha hooks pre-task \
            --description "Synchronize ${{ matrix.repo.name }} repository" \
            --namespace "${{ env.COORDINATION_NAMESPACE }}"

          # Based on repo type, perform specific sync operations
          case "${{ matrix.repo.type }}" in
            "core")
              echo "Core repository sync - full validation required"
              # Add core-specific sync logic
              ;;
            "intelligence")
              echo "Intelligence repository sync - ML model coordination"
              # Add intelligence-specific sync logic
              ;;
            "cognitive")
              echo "Cognitive repository sync - consciousness state sync"
              # Add cognitive-specific sync logic
              ;;
            "database")
              echo "Database repository sync - schema and migration sync"
              # Add database-specific sync logic
              ;;
            "deployment")
              echo "Deployment repository sync - pipeline and config sync"
              # Add deployment-specific sync logic
              ;;
          esac

          # Update sync status
          npx claude-flow@alpha memory store \
            --namespace "${{ env.COORDINATION_NAMESPACE }}" \
            --key "sync-${{ matrix.repo.name }}-${{ github.run_number }}" \
            --value '{"status": "completed", "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"}'

      - name: Validate synchronization
        run: |
          # Verify sync completed successfully
          npx claude-flow@alpha verification-quality \
            --namespace "${{ env.COORDINATION_NAMESPACE }}" \
            --key "sync-${{ matrix.repo.name }}-${{ github.run_number }}" \
            --truth-score-threshold 0.95

      - name: Post-sync coordination
        run: |
          npx claude-flow@alpha hooks post-task \
            --task-id "sync-${{ matrix.repo.name }}-${{ github.run_number }}" \
            --namespace "${{ env.COORDINATION_NAMESPACE }}"

  # Cross-repository integration testing
  integration-testing:
    name: Cross-Repository Integration Testing
    runs-on: ubuntu-latest
    needs: [repo-discovery, dependency-analysis, repo-sync]
    if: always() && needs.repo-sync.result == 'success'
    steps:
      - name: Setup integration testing environment
        run: |
          npm install -g claude-flow@alpha
          npx claude-flow@alpha memory store \
            --namespace "${{ env.COORDINATION_NAMESPACE }}" \
            --key "integration-test-${{ github.run_number }}" \
            --value '{"status": "starting", "phase": "setup"}'

      - name: Execute cross-repository integration tests
        run: |
          # Phase 1: Core integration tests
          echo "Executing core integration tests..."
          npx claude-flow@alpha memory store \
            --namespace "${{ env.COORDINATION_NAMESPACE }}" \
            --key "integration-test-${{ github.run_number }}" \
            --value '{"status": "running", "phase": "core-tests"}'

          # Phase 2: Cross-repository API tests
          echo "Executing cross-repository API tests..."
          npx claude-flow@alpha memory store \
            --namespace "${{ env.COORDINATION_NAMESPACE }}" \
            --key "integration-test-${{ github.run_number }}" \
            --value '{"status": "running", "phase": "api-tests"}'

          # Phase 3: Cognitive intelligence integration
          echo "Executing cognitive intelligence integration tests..."
          npx claude-flow@alpha memory store \
            --namespace "${{ env.COORDINATION_NAMESPACE }}" \
            --key "integration-test-${{ github.run_number }}" \
            --value '{"status": "running", "phase": "cognitive-tests"}"

          # Phase 4: Performance integration
          echo "Executing performance integration tests..."
          npx claude-flow@alpha memory store \
            --namespace "${{ env.COORDINATION_NAMESPACE }}" \
            --key "integration-test-${{ github.run_number }}" \
            --value '{"status": "running", "phase": "performance-tests"}'

      - name: Validate integration results
        run: |
          # Comprehensive integration validation
          npx claude-flow@alpha verification-quality \
            --namespace "${{ env.COORDINATION_NAMESPACE }}" \
            --integration-validation comprehensive \
            --performance-benchmark true \
            --cognitive-assessment true

          npx claude-flow@alpha memory store \
            --namespace "${{ env.COORDINATION_NAMESPACE }}" \
            --key "integration-test-${{ github.run_number }}" \
            --value '{"status": "completed", "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"}'

      - name: Generate integration report
        run: |
          npx claude-flow@alpha memory retrieve \
            --namespace "${{ env.COORDINATION_NAMESPACE }}" \
            --pattern "sync-*-${{ github.run_number }}" \
            --output integration-data.json

          cat << EOF > docs/integration-report-${{ github.run_number }}.md
          # Cross-Repository Integration Report

          ## Integration Status
          \`\`\`json
          $(cat integration-data.json | jq -c '. | group_by(.status) | map({status: .[0].status, count: length})')
          \`\`\`

          ## Performance Metrics
          \`\`\`json
          {
            "sync_duration": "${{ env.SYNC_TIMEOUT }}s",
            "repositories_synchronized": ${{ needs.repo-discovery.outputs.affected-repos | fromJson | length }},
            "integration_tests": "passed",
            "cognitive_coordination": "successful"
          }
          \`\`\`

          Generated: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          EOF

  # Coordination completion and reporting
  coordination-complete:
    name: Coordination Completion
    runs-on: ubuntu-latest
    needs: [repo-discovery, dependency-analysis, repo-sync, integration-testing]
    if: always()
    steps:
      - name: Generate final coordination report
        run: |
          npm install -g claude-flow@alpha

          # Compile all coordination data
          npx claude-flow@alpha memory retrieve \
            --namespace "${{ env.COORDINATION_NAMESPACE }}" \
            --pattern "*-${{ github.run_number }}" \
            --output coordination-complete.json

          cat << EOF > docs/coordination-complete-${{ github.run_number }}.md
          # Multi-Repository Coordination Complete

          ## Summary
          - **Total Repositories**: ${{ needs.repo-discovery.outputs.affected-repos | fromJson | length }}
          - **Sync Status**: ${{ needs.repo-sync.result }}
          - **Integration Status**: ${{ needs.integration-testing.result }}
          - **Coordination Type**: ${{ github.event.inputs.coordination_type || 'auto' }}

          ## Repository Status
          \`\`\`json
          ${{ needs.repo-discovery.outputs.affected-repos }}
          \`\`\`

          ## Performance Metrics
          - Coordination completed in: ${{ env.SYNC_TIMEOUT }}s
          - Cognitive level: Maximum
          - Swarm coordination: Hierarchical

          Generated: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          EOF

      - name: Update coordination metrics
        run: |
          npx claude-flow@alpha memory store \
            --namespace "${{ env.COORDINATION_NAMESPACE }}" \
            --key "coordination-complete-${{ github.run_number }}" \
            --value "$(cat coordination-complete.json)"

          npx claude-flow@alpha hooks session-end \
            --export-metrics true \
            --coordination-report true

      - name: Upload coordination artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coordination-artifacts-${{ github.run_number }}
          path: |
            docs/coordination-*.md
            coordination-complete.json
          retention-days: 30

      - name: Notify coordination status
        if: always()
        run: |
          echo "🔄 Multi-repository coordination ${{ needs.repo-sync.result == 'success' && needs.integration-testing.result == 'success' && 'completed successfully' || 'completed with issues' }}"
          echo "📊 View full report: docs/coordination-complete-${{ github.run_number }}.md"