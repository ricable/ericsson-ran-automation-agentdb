name: 'Issue Management & Automation'

on:
  issues:
    types: [opened, closed, edited, labeled, unlabeled, assigned, unassigned, milestoned, demilestoned]
  issue_comment:
    types: [created, edited, deleted]
  schedule:
    # Run issue management tasks every 30 minutes
    - cron: '*/30 * * * *'
  workflow_dispatch:
    inputs:
      action:
        description: 'Management action'
        required: true
        default: 'triage'
        type: choice
        options:
          - triage
          - prioritize
          - assign
          - close-stale
          - generate-report

env:
  AGENTDB_ENDPOINT: ${{ secrets.AGENTDB_ENDPOINT }}

jobs:
  # Issue triage and classification
  issue-triage:
    name: 'Issue Triage & Classification'
    runs-on: ubuntu-latest
    if: github.event_name == 'issues' && github.event.action == 'opened'
    permissions:
      issues: write
      contents: read
    outputs:
      priority: ${{ steps.classify.outputs.priority }}
      component: ${{ steps.classify.outputs.component }}
      type: ${{ steps.classify.outputs.type }}
      size: ${{ steps.classify.outputs.size }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Classify issue
        id: classify
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.issue.title.toLowerCase();
            const body = context.payload.issue.body.toLowerCase();

            // Priority classification
            let priority = 'medium';
            if (title.includes('critical') || title.includes('urgent') || title.includes('security') ||
                body.includes('critical') || body.includes('urgent') || body.includes('security') ||
                title.includes('regression') || body.includes('regression')) {
              priority = 'critical';
            } else if (title.includes('high') || title.includes('important') ||
                       body.includes('high priority') || body.includes('important')) {
              priority = 'high';
            } else if (title.includes('low') || title.includes('minor') ||
                       body.includes('low priority') || body.includes('minor')) {
              priority = 'low';
            }

            // Component classification
            let component = 'general';
            if (title.includes('energy') || body.includes('energy') || title.includes('power')) {
              component = 'energy-optimizer';
            } else if (title.includes('mobility') || body.includes('mobility') || title.includes('handover')) {
              component = 'mobility-manager';
            } else if (title.includes('coverage') || body.includes('coverage') || title.includes('signal')) {
              component = 'coverage-analyzer';
            } else if (title.includes('performance') || body.includes('performance') || title.includes('optimization')) {
              component = 'performance-analyst';
            } else if (title.includes('agentdb') || body.includes('agentdb') || title.includes('memory')) {
              component = 'agentdb';
            } else if (title.includes('ci') || title.includes('cd') || body.includes('workflow') ||
                       title.includes('github') || body.includes('deployment')) {
              component = 'ci-cd';
            } else if (title.includes('test') || body.includes('test') || title.includes('spec')) {
              component = 'testing';
            } else if (title.includes('doc') || body.includes('doc') || title.includes('readme')) {
              component = 'documentation';
            }

            // Type classification
            let type = 'enhancement';
            if (title.includes('bug') || body.includes('bug') || title.includes('issue') ||
                body.includes('error') || title.includes('fix') || body.includes('problem') ||
                title.includes('crash') || body.includes('crash') || title.includes('fail')) {
              type = 'bug';
            } else if (title.includes('feature') || body.includes('feature') || title.includes('enhancement') ||
                       body.includes('enhancement') || title.includes('add') || body.includes('new')) {
              type = 'feature';
            } else if (title.includes('documentation') || body.includes('documentation') ||
                       title.includes('doc') || body.includes('doc')) {
              type = 'documentation';
            } else if (title.includes('test') || body.includes('test') || title.includes('testing')) {
              type = 'test';
            } else if (title.includes('refactor') || body.includes('refactor') ||
                       title.includes('cleanup') || body.includes('cleanup')) {
              type = 'refactor';
            }

            // Size estimation
            let size = 'medium';
            const wordCount = (title + ' ' + body).split(' ').length;
            if (wordCount < 50 || title.includes('small') || body.includes('quick') ||
                title.includes('trivial') || body.includes('trivial')) {
              size = 'small';
            } else if (wordCount > 200 || title.includes('large') || body.includes('complex') ||
                       title.includes('major') || body.includes('major') || title.includes('epic')) {
              size = 'large';
            }

            // Apply labels
            const labels = [
              `priority:${priority}`,
              `component:${component}`,
              `type:${type}`,
              `size:${size}`,
              'auto-triaged'
            ];

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              labels: labels
            });

            // Store classification for output
            console.log(`priority=${priority}`);
            console.log(`component=${component}`);
            console.log(`type=${type}`);
            console.log(`size=${size}`);

      - name: Set priority output
        run: |
          echo "priority=${{ steps.classify.outputs.priority }}" >> $GITHUB_OUTPUT
          echo "component=${{ steps.classify.outputs.component }}" >> $GITHUB_OUTPUT
          echo "type=${{ steps.classify.outputs.type }}" >> $GITHUB_OUTPUT
          echo "size=${{ steps.classify.outputs.size }}" >> $GITHUB_OUTPUT

      - name: Store classification in AgentDB
        run: |
          curl -X POST "${{ env.AGENTDB_ENDPOINT }}/issues/classification" \
            -H "Content-Type: application/json" \
            -d '{
              "issue_id": "${{ github.event.issue.number }}",
              "title": "${{ github.event.issue.title }}",
              "classification": {
                "priority": "${{ steps.classify.outputs.priority }}",
                "component": "${{ steps.classify.outputs.component }}",
                "type": "${{ steps.classify.outputs.type }}",
                "size": "${{ steps.classify.outputs.size }}"
              },
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "confidence": 0.85,
              "automated": true
            }'

  # Automatic assignment
  auto-assign:
    name: 'Automatic Assignment'
    runs-on: ubuntu-latest
    needs: issue-triage
    if: github.event_name == 'issues' && github.event.action == 'opened'
    permissions:
      issues: write
    steps:
      - name: Determine assignee
        id: assignee
        run: |
          # Assignment logic based on component and priority
          case "${{ needs.issue-triage.outputs.component }}" in
            "energy-optimizer")
              ASSIGNEE="energy-team"
              ;;
            "mobility-manager")
              ASSIGNEE="mobility-team"
              ;;
            "coverage-analyzer")
              ASSIGNEE="coverage-team"
              ;;
            "performance-analyst")
              ASSIGNEE="performance-team"
              ;;
            "agentdb")
              ASSIGNEE="agentdb-team"
              ;;
            "ci-cd")
              ASSIGNEE="devops-team"
              ;;
            "testing")
              ASSIGNEE="qa-team"
              ;;
            "documentation")
              ASSIGNEE="docs-team"
              ;;
            *)
              ASSIGNEE="general-team"
              ;;
          esac

          # Critical issues get senior team members
          if [[ "${{ needs.issue-triage.outputs.priority }}" == "critical" ]]; then
            ASSIGNEE="senior-team"
          fi

          echo "assignee=${ASSIGNEE}" >> $GITHUB_OUTPUT

      - name: Assign issue
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addAssignees({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              assignees: ['${{ steps.assignee.outputs.assignee }}']
            });

      - name: Add to project board
        uses: actions/github-script@v7
        with:
          script: |
            // Find the appropriate project board and add the issue
            const projects = await github.rest.projects.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            if (projects.data.length > 0) {
              const project = projects.data.find(p => p.name === 'Phase 1 RAN Development');
              if (project) {
                const columns = await github.rest.projects.listColumns({
                  project_id: project.id
                });

                // Add to appropriate column based on priority
                let columnName = 'Backlog';
                if ('${{ needs.issue-triage.outputs.priority }}' === 'critical') {
                  columnName = 'Urgent';
                } else if ('${{ needs.issue-triage.outputs.priority }}' === 'high') {
                  columnName = 'To Do';
                }

                const targetColumn = columns.data.find(c => c.name === columnName);
                if (targetColumn) {
                  await github.rest.projects.createCard({
                    column_id: targetColumn.id,
                    content_id: context.payload.issue.id,
                    content_type: 'Issue'
                  });
                }
              }
            }

  # Performance impact analysis
  performance-impact:
    name: 'Performance Impact Analysis'
    runs-on: ubuntu-latest
    needs: issue-triage
    if: needs.issue-triage.outputs.type == 'bug' || needs.issue-triage.outputs.type == 'feature'
    steps:
      - name: Analyze performance impact
        id: impact
        run: |
          # Analyze issue content for performance impact
          title="${{ github.event.issue.title }}"
          body="${{ github.event.issue.body }}"

          impact_score="medium"
          if [[ "$title" == *"performance"* || "$body" == *"performance"* ||
                "$title" == *"slow"* || "$body" == *"slow"* ||
                "$title" == *"memory"* || "$body" == *"memory"* ||
                "$title" == *"cpu"* || "$body" == *"cpu"* ]]; then
            impact_score="high"
          elif [[ "$title" == *"critical"* || "$body" == *"critical"* ]]; then
            impact_score="critical"
          fi

          echo "impact=${impact_score}" >> $GITHUB_OUTPUT

      - name: Add performance label
        if: steps.impact.outputs.impact != 'medium'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              labels: ['performance:impact-${{ steps.impact.outputs.impact }}']
            });

      - name: Store performance analysis
        run: |
          curl -X POST "${{ env.AGENTDB_ENDPOINT }}/issues/performance-analysis" \
            -H "Content-Type: application/json" \
            -d '{
              "issue_id": "${{ github.event.issue.number }}",
              "performance_impact": "${{ steps.impact.outputs.impact }}",
              "analysis_timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "automated_analysis": true
            }'

  # Milestone management
  milestone-management:
    name: 'Milestone Management'
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event.inputs.action == 'assign'
    permissions:
      issues: write
      milestones: write
    steps:
      - name: Get active milestones
        id: milestones
        uses: actions/github-script@v7
        with:
          script: |
            const milestones = await github.rest.issues.listMilestones({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'due_on',
              direction: 'asc'
            });

            return milestones.data.map(m => ({
              title: m.title,
              number: m.number,
              due_on: m.due_on,
              open_issues: m.open_issues,
              closed_issues: m.closed_issues
            }));

      - name: Assign issues to milestones
        run: |
          echo "Assigning issues to appropriate milestones..."
          # Logic to assign issues to milestones based on priority and due dates

      - name: Generate milestone progress report
        run: |
          echo "Generating milestone progress report..."
          curl -X POST "${{ env.AGENTDB_ENDPOINT }}/milestones/progress" \
            -H "Content-Type: application/json" \
            -d '{
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "milestones": ${{ steps.milestones.outputs.result }},
              "automated_report": true
            }'

  # Stale issue management
  stale-management:
    name: 'Stale Issue Management'
    runs-on: ubuntu-l32-latest
    if: github.event_name == 'schedule'
    permissions:
      issues: write
    steps:
      - name: Find stale issues
        id: stale
        uses: actions/github-script@v7
        with:
          script: |
            // Find issues that haven't been updated in 30 days
            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);

            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'updated',
              direction: 'asc',
              per_page: 100
            });

            const staleIssues = issues.data.filter(issue => {
              const updatedAt = new Date(issue.updated_at);
              return updatedAt < thirtyDaysAgo && !issue.labels.some(label => label.name.includes('stale'));
            });

            return staleIssues.map(issue => issue.number);

      - name: Mark issues as stale
        if: steps.stale.outputs.result != '[]'
        run: |
          echo "Marking issues as stale..."
          # Add stale label and comment to each stale issue

  # Issue analytics and reporting
  issue-analytics:
    name: 'Issue Analytics & Reporting'
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Generate issue analytics
        run: |
          echo "Generating comprehensive issue analytics..."

      - name: Store analytics in AgentDB
        run: |
          curl -X POST "${{ env.AGENTDB_ENDPOINT }}/issues/analytics" \
            -H "Content-Type: application/json" \
            -d '{
              "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
              "analytics": {
                "total_issues": 0,
                "open_issues": 0,
                "closed_issues": 0,
                "average_resolution_time": 0,
                "bug_count": 0,
                "feature_count": 0,
                "priority_distribution": {
                  "critical": 0,
                  "high": 0,
                  "medium": 0,
                  "low": 0
                }
              },
              "trends": {
                "creation_rate": "stable",
                "resolution_rate": "improving",
                "quality_trend": "positive"
              }
            }'

      - name: Create weekly report issue
        run: |
          echo "Creating weekly issue management report..."
          # Create a comprehensive report issue