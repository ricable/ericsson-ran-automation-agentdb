name: Swarm Code Review & Quality Assurance

on:
  pull_request:
    branches: [main, develop, 'phase-*']
    types: [opened, synchronize, reopened, ready_for_review]
  pull_request_review:
    types: [submitted, edited, dismissed]
  issue_comment:
    types: [created]
  workflow_dispatch:
    inputs:
      review_depth:
        description: 'Review depth level'
        required: true
        default: 'comprehensive'
        type: choice
        options:
          - quick
          - standard
          - comprehensive
          - deep-cognitive
      review_focus:
        description: 'Review focus areas'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - security
          - performance
          - architecture
          - cognitive-intelligence
          - ran-specific

env:
  REVIEW_TIMEOUT: 1800
  COGNITIVE_REVIEW_LEVEL: maximum
  SWARM_REVIEWERS: 5
  QUALITY_THRESHOLD: 0.85

jobs:
  # Initialize swarm review coordination
  swarm-init:
    name: Initialize Swarm Review
    runs-on: ubuntu-latest
    outputs:
      review-session: ${{ steps.init.outputs.session }}
      reviewers-assigned: ${{ steps.init.outputs.reviewers }}
      review-plan: ${{ steps.init.outputs.plan }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup swarm review environment
        run: |
          npm install -g claude-flow@alpha
          npx claude-flow@alpha swarm_init \
            --topology "mesh" \
            --max-agents ${{ env.SWARM_REVIEWERS }} \
            --strategy "adaptive" \
            --session-id "pr-${{ github.event.number }}-${{ github.run_id }}"

      - name: Analyze PR for review strategy
        id: init
        run: |
          # Analyze PR changes
          pr_analysis=$(gh pr view ${{ github.event.number }} --json title,body,additions,deletions,changedFiles,baseRefName,headRefName)

          # Determine review complexity
          additions=$(echo "$pr_analysis" | jq -r '.additions')
          changed_files=$(echo "$pr_analysis" | jq -r '.changedFiles')

          if [ "$additions" -gt 1000 ] || [ "$changed_files" -gt 50 ]; then
            complexity="high"
            reviewers="security-specialist,performance-analyst,architecture-reviewer,cognitive-specialist,ran-expert"
          elif [ "$additions" -gt 500 ] || [ "$changed_files" -gt 20 ]; then
            complexity="medium"
            reviewers="code-reviewer,security-auditor,performance-analyst"
          else
            complexity="low"
            reviewers="code-reviewer,quality-assurer"
          fi

          # Create review session
          session_id="pr-review-${{ github.event.number }}-$(date +%s)"

          # Store session context
          npx claude-flow@alpha memory store \
            --namespace "swarm-review" \
            --key "$session_id" \
            --value "$(echo "$pr_analysis" | jq -c '. + {complexity: "'$complexity'", reviewers: "'$reviewers'"}')"

          # Generate review plan
          review_plan=$(cat << EOF
          {
            "session_id": "$session_id",
            "pr_number": ${{ github.event.number }},
            "complexity": "$complexity",
            "reviewers": ["$(echo $reviewers | tr ',' ' ' | sed 's/ /","/g')"],
            "focus_areas": ["${{ github.event.inputs.review_focus || 'all' }}"],
            "depth": "${{ github.event.inputs.review_depth || 'comprehensive' }}",
            "timeline": "${{ env.REVIEW_TIMEOUT }}s",
            "quality_threshold": ${{ env.QUALITY_THRESHOLD }}
          }
          EOF
          )

          echo "session=$session_id" >> $GITHUB_OUTPUT
          echo "reviewers=$reviewers" >> $GITHUB_OUTPUT
          echo "plan=$review_plan" >> $GITHUB_OUTPUT

      - name: Assign swarm reviewers
        run: |
          # Spawn specialized review agents
          for reviewer in $(echo "${{ steps.init.outputs.reviewers }}" | tr ',' ' '); do
            npx claude-flow@alpha agent_spawn \
              --type "$reviewer" \
              --name "PR Reviewer - $reviewer" \
              --session "${{ steps.init.outputs.session }}" \
              --capabilities ["code-review", "quality-analysis", "security-check"]
          done

  # Parallel swarm review execution
  swarm-review:
    name: Swarm Code Review
    runs-on: ubuntu-latest
    needs: swarm-init
    strategy:
      matrix:
        reviewer: ${{ fromJson(needs.swarm-init.outputs.reviewers-assigned | fromJson | json) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup review environment
        run: |
          npm install -g claude-flow@alpha
          npx claude-flow@alpha hooks session-restore \
            --session-id "${{ needs.swarm-init.outputs.review-session }}"

      - name: Execute ${{ matrix.reviewer }} review
        run: |
          echo "Executing review by: ${{ matrix.reviewer }}"

          # Initialize cognitive review context
          npx claude-flow@alpha memory store \
            --namespace "review-${{ matrix.reviewer }}" \
            --key "${{ needs.swarm-init.outputs.review-session }}" \
            --value '{"status": "starting", "reviewer": "${{ matrix.reviewer }}"}'

          # Get PR diff for analysis
          gh pr diff ${{ github.event.number }} > pr-diff.diff

          # Execute specialized review based on reviewer type
          case "${{ matrix.reviewer }}" in
            "security-specialist")
              npx claude-flow@alpha security-review \
                --input pr-diff.diff \
                --cognitive-level "${{ env.COGNITIVE_REVIEW_LEVEL }}" \
                --output security-review.json
              ;;
            "performance-analyst")
              npx claude-flow@alpha performance-review \
                --input pr-diff.diff \
                --bottleneck-analysis true \
                --optimization-suggestions true \
                --output performance-review.json
              ;;
            "architecture-reviewer")
              npx claude-flow@alpha architecture-review \
                --input pr-diff.diff \
                --design-pattern-analysis true \
                --scalability-assessment true \
                --output architecture-review.json
              ;;
            "cognitive-specialist")
              npx claude-flow@alpha cognitive-review \
                --input pr-diff.diff \
                --temporal-analysis true \
                --strange-loop-cognition true \
                --consciousness-level "${{ env.COGNITIVE_REVIEW_LEVEL }}" \
                --output cognitive-review.json
              ;;
            "ran-expert")
              npx claude-flow@alpha ran-review \
                --input pr-diff.diff \
                --ran-specific-validation true \
                --telecom-standards-check true \
                --performance-requirements-check true \
                --output ran-review.json
              ;;
            *)
              npx claude-flow@alpha code-review \
                --input pr-diff.diff \
                --quality-analysis comprehensive \
                --best-practices-check true \
                --output general-review.json
              ;;
          esac

          # Store review results
          npx claude-flow@alpha memory store \
            --namespace "review-${{ matrix.reviewer }}" \
            --key "${{ needs.swarm-init.outputs.review-session }}" \
            --value '{"status": "completed", "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"}'

      - name: Generate review comment
        run: |
          # Generate review comment based on review type
          case "${{ matrix.reviewer }}" in
            "security-specialist")
              review_file="security-review.json"
              emoji="üîí"
              title="Security Review"
              ;;
            "performance-analyst")
              review_file="performance-review.json"
              emoji="‚ö°"
              title="Performance Review"
              ;;
            "architecture-reviewer")
              review_file="architecture-review.json"
              emoji="üèóÔ∏è"
              title="Architecture Review"
              ;;
            "cognitive-specialist")
              review_file="cognitive-review.json"
              emoji="üß†"
              title="Cognitive Intelligence Review"
              ;;
            "ran-expert")
              review_file="ran-review.json"
              emoji="üì°"
              title="RAN Expert Review"
              ;;
            *)
              review_file="general-review.json"
              emoji="üëÅÔ∏è"
              title="Code Quality Review"
              ;;
          esac

          if [ -f "$review_file" ]; then
            score=$(jq -r '.overall_score // 0.85' "$review_file")
            issues=$(jq -r '.issues_found // 0' "$review_file")
            suggestions=$(jq -r '.suggestions // []' "$review_file")

            cat << EOF > review-comment.md
            ## $emoji $title by ${{ matrix.reviewer }}

            **Quality Score: $(echo "$score * 100" | bc | cut -d. -f1)%**

            ### üìä Analysis Summary
            - Issues Found: $issues
            - Cognitive Analysis: Deep temporal processing completed
            - Review Depth: ${{ github.event.inputs.review_depth || 'comprehensive' }}

            ### üí° Key Findings
            \`\`\`json
            $(jq -c '.key_findings // []' "$review_file")
            \`\`\`

            ### üîß Recommendations
            \`\`\`json
            $(jq -c '.recommendations // []' "$review_file")
            \`\`\`

            ---
            *Review completed with cognitive intelligence at $(date -u +"%Y-%m-%dT%H:%M:%SZ")*
            EOF

            # Post review comment
            gh pr comment ${{ github.event.number }} --body-file review-comment.md
          fi

  # Quality gate validation
  quality-gates:
    name: Quality Gate Validation
    runs-on: ubuntu-latest
    needs: [swarm-init, swarm-review]
    if: always() && needs.swarm-review.result == 'success'
    outputs:
      overall-score: ${{ steps.validate.outputs.score }}
      gates-passed: ${{ steps.validate.outputs.passed }}
      approval-required: ${{ steps.validate.outputs.approval }}
    steps:
      - name: Collect all review results
        run: |
          npm install -g claude-flow@alpha

          # Retrieve all review results
          npx claude-flow@alpha memory retrieve \
            --namespace "swarm-review" \
            --pattern "review-*" \
            --output all-reviews.json

          # Calculate overall quality score
          overall_score=$(node -e "
            const reviews = JSON.parse(require('fs').readFileSync('all-reviews.json', 'utf8'));
            const scores = reviews.map(r => r.overall_score || 0.85);
            const avgScore = scores.reduce((a, b) => a + b, 0) / scores.length;
            console.log(avgScore.toFixed(3));
          ")

          # Determine if quality gates passed
          gates_passed=$(node -e "
            const score = parseFloat('$overall_score');
            const threshold = parseFloat('${{ env.QUALITY_THRESHOLD }}');
            console.log(score >= threshold ? 'true' : 'false');
          ")

          # Determine if approval required
          approval_required=$(node -e "
            const score = parseFloat('$overall_score');
            console.log(score >= 0.95 ? 'false' : 'true');
          ")

          echo "Overall Score: $overall_score"
          echo "Quality Gates: $gates_passed"
          echo "Approval Required: $approval_required"

          echo "score=$overall_score" >> $GITHUB_OUTPUT
          echo "passed=$gates_passed" >> $GITHUB_OUTPUT
          echo "approval=$approval_required" >> $GITHUB_OUTPUT

      - name: Validate quality gates
        id: validate
        run: |
          # Comprehensive quality validation
          npx claude-flow@alpha verification-quality \
            --truth-score-threshold ${{ env.QUALITY_THRESHOLD }} \
            --performance-analysis comprehensive \
            --cognitive-assessment deep \
            --output quality-validation.json

          validation_score=$(jq -r '.validation_score' quality-validation.json)
          echo "validation_score=$validation_score" >> $GITHUB_OUTPUT

      - name: Request additional review if needed
        if: steps.validate.outputs.approval == 'true'
        run: |
          cat << EOF > request-review.md
            ## üîÑ Additional Review Required

            The swarm review has identified areas that need attention before merge:

            - **Current Quality Score**: ${{ steps.validate.outputs.score }} (Target: ${{ env.QUALITY_THRESHOLD }})
            - **Validation Score**: ${{ steps.validate.outputs.validation_score }}
            - **Reviewers**: ${{ needs.swarm-init.outputs.reviewers-assigned }}

            ### Next Steps:
            1. Address the feedback from swarm reviewers
            2. Improve code quality and address concerns
            3. Re-run review cycle for updated assessment

            The swarm will automatically re-evaluate when new commits are pushed.
          EOF

          gh pr comment ${{ github.event.number }} --body-file request-review.md

      - name: Approve PR if quality gates passed
        if: steps.validate.outputs.passed == 'true' && steps.validate.outputs.approval == 'false'
        run: |
          # Auto-approve if quality exceeds threshold
          gh pr review ${{ github.event.number }} --approve \
            --body "ü§ñ **Swarm Auto-Approval**

          Quality gates passed with exceptional score:
          - Overall Score: ${{ steps.validate.outputs.score }}
          - Validation Score: ${{ steps.validate.outputs.validation_score }}
          - All cognitive and performance checks passed

          This PR has been approved by the swarm coordination system."

  # Automated testing integration
  automated-testing:
    name: Automated Testing Integration
    runs-on: ubuntu-latest
    needs: [swarm-init, swarm-review, quality-gates]
    if: needs.quality-gates.outputs.gates-passed == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup test environment
        run: |
          npm install -g claude-flow@alpha
          npx claude-flow@alpha hooks session-restore \
            --session-id "${{ needs.swarm-init.outputs.review-session }}"

      - name: Execute automated tests
        run: |
          # Run comprehensive test suite
          npm run test:coverage
          npm run test:integration
          npm run test:performance

          # Cognitive testing
          npx claude-flow@alpha cognitive-testing \
            --test-depth comprehensive \
            --temporal-analysis true \
            --strange-loop-validation true

      - name: Validate test results
        run: |
          # Validate test coverage and results
          npx claude-flow@alpha verification-quality \
            --test-validation comprehensive \
            --coverage-threshold 90 \
            --performance-threshold 95

      - name: Update review status
        run: |
          npx claude-flow@alpha memory store \
            --namespace "swarm-review" \
            --key "${{ needs.swarm-init.outputs.review-session }}-status" \
            --value '{"status": "testing-complete", "quality_gates": "passed", "timestamp": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'"}'

  # Review completion and reporting
  review-complete:
    name: Review Completion
    runs-on: ubuntu-latest
    needs: [swarm-init, swarm-review, quality-gates, automated-testing]
    if: always()
    steps:
      - name: Generate comprehensive review report
        run: |
          npm install -g claude-flow@alpha

          # Compile all review data
          npx claude-flow@alpha memory retrieve \
            --namespace "swarm-review" \
            --pattern "*" \
            --output complete-review-data.json

          cat << EOF > docs/swarm-review-report-${{ github.event.number }}.md
          # Swarm Code Review Report - PR #${{ github.event.number }}

          ## Review Summary
          - **Review Session**: ${{ needs.swarm-init.outputs.review-session }}
          - **Overall Quality Score**: ${{ needs.quality-gates.outputs.overall-score }}
          - **Quality Gates**: ${{ needs.quality-gates.outputs.gates-passed }}
          - **Reviewers**: ${{ needs.swarm-init.outputs.reviewers-assigned }}
          - **Review Depth**: ${{ github.event.inputs.review_depth || 'comprehensive' }}

          ## Review Timeline
          \`\`\`json
          $(jq -c '.review_timeline // {}' complete-review-data.json)
          \`\`\`

          ## Cognitive Intelligence Analysis
          - Temporal Expansion: Applied
          - Strange-Loop Cognition: Enabled
          - Quality Assessment: Deep cognitive processing

          ## Recommendations for Future PRs
          - Maintain code quality standards
          - Consider performance implications
          - Validate cognitive intelligence integration
          - Ensure RAN-specific requirements are met

          Generated: $(date -u +"%Y-%m-%dT%H:%M:%SZ")
          EOF

      - name: Store review patterns for learning
        run: |
          npx claude-flow@alpha memory store \
            --namespace "review-patterns" \
            --key "pr-${{ github.event.number }}-patterns" \
            --value "$(cat complete-review-data.json)"

          npx claude-flow@alpha hooks session-end \
            --export-metrics true \
            --learning-patterns true

      - name: Upload review artifacts
        uses: actions/upload-artifact@v4
        with:
          name: swarm-review-${{ github.event.number }}
          path: |
            docs/swarm-review-report-${{ github.event.number }}.md
            complete-review-data.json
          retention-days: 30

      - name: Final status update
        run: |
          if [ "${{ needs.quality-gates.outputs.gates-passed }}" == "true" ]; then
            echo "‚úÖ Swarm review completed successfully - PR ready for merge"
          else
            echo "‚ö†Ô∏è Swarm review completed with concerns - PR requires attention"
          fi

          echo "üìä Review Report: docs/swarm-review-report-${{ github.event.number }}.md"