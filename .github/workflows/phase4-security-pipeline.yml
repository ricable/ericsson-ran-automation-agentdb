name: Phase 4 Security Pipeline
description: Comprehensive security scanning, vulnerability assessment, and compliance checking

on:
  push:
    branches: [main, develop, feat/phase4]
    paths: ['src/**', 'package.json', 'package-lock.json', '.github/workflows/**']
  pull_request:
    branches: [main, develop]
    paths: ['src/**', 'package.json', 'package-lock.json']
  workflow_call:
    inputs:
      scan_level:
        description: 'Security scan level'
        required: true
        default: 'standard'
        type: choice
        options:
        - quick
        - standard
        - comprehensive
      fail_on_high:
        description: 'Fail pipeline on high severity vulnerabilities'
        required: false
        default: true
        type: boolean
      generate_sbom:
        description: 'Generate Software Bill of Materials'
        required: false
        default: true
        type: boolean
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: true
        default: 'all'
        type: choice
        options:
        - dependencies
        - code
        - container
        - infrastructure
        - all
      severity_threshold:
        description: 'Minimum severity level to report'
        required: true
        default: 'medium'
        type: choice
        options:
        - low
        - medium
        - high
        - critical

env:
  NODE_VERSION: '18'
  SCAN_TIMEOUT: 1800
  MAX_RETRIES: 3
  RETRY_DELAY: 30
  REPORT_RETENTION_DAYS: 90

jobs:
  # Security scan configuration
  security-config:
    name: Security Scan Configuration
    runs-on: ubuntu-latest
    outputs:
      scan-level: ${{ steps.config.outputs.scan-level }}
      fail-on-high: ${{ steps.config.outputs.fail-on-high }}
      generate-sbom: ${{ steps.config.outputs.generate-sbom }}
      severity-threshold: ${{ steps.config.outputs.severity-threshold }}
    steps:
      - name: Configure security parameters
        id: config
        run: |
          SCAN_LEVEL="${{ github.event.inputs.scan_level || 'standard' }}"
          FAIL_ON_HIGH="${{ github.event.inputs.fail_on_high || 'true' }}"
          GENERATE_SBOM="${{ github.event.inputs.generate_sbom || 'true' }}"
          SEVERITY_THRESHOLD="${{ github.event.inputs.severity_threshold || 'medium' }}"

          echo "scan-level=$SCAN_LEVEL" >> $GITHUB_OUTPUT
          echo "fail-on-high=$FAIL_ON_HIGH" >> $GITHUB_OUTPUT
          echo "generate-sbom=$GENERATE_SBOM" >> $GITHUB_OUTPUT
          echo "severity-threshold=$SEVERITY_THRESHOLD" >> $GITHUB_OUTPUT

          echo "🔒 Security Scan Configuration:"
          echo "  Scan Level: $SCAN_LEVEL"
          echo "  Fail on High: $FAIL_ON_HIGH"
          echo "  Generate SBOM: $GENERATE_SBOM"
          echo "  Severity Threshold: $SEVERITY_THRESHOLD"

  # Dependency Security Scanning
  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    needs: security-config
    outputs:
      vuln-count: ${{ steps.vulnerabilities.outputs.count }}
      high-severity: ${{ steps.vulnerabilities.outputs.high }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run npm audit
        id: npm-audit
        run: |
          AUDIT_OUTPUT=$(npm audit --json || echo '{"vulnerabilities": {}}')
          echo "audit-output=$AUDIT_OUTPUT" >> $GITHUB_OUTPUT

          # Count vulnerabilities by severity
          VULN_COUNT=$(echo "$AUDIT_OUTPUT" | jq '.vulnerabilities | length')
          HIGH_COUNT=$(echo "$AUDIT_OUTPUT" | jq '[.vulnerabilities[] | select(.severity == "high" or .severity == "critical")] | length')

          echo "Total vulnerabilities: $VULN_COUNT"
          echo "High/Critical vulnerabilities: $HIGH_COUNT"

          if [[ "${{ needs.security-config.outputs.fail-on-high }}" == "true" && "$HIGH_COUNT" -gt 0 ]]; then
            echo "❌ High/Critical vulnerabilities found"
            echo "$AUDIT_OUTPUT" | jq '.vulnerabilities[] | select(.severity == "high" or .severity == "critical")'
            exit 1
          fi

      - name: Run Snyk dependency scan
        id: snyk-deps
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          if [[ -n "$SNYK_TOKEN" ]]; then
            npx snyk test --json > snyk-report.json || echo "Snyk scan completed with vulnerabilities"

            # Extract vulnerability count
            if [[ -f snyk-report.json ]]; then
              VULN_COUNT=$(cat snyk-report.json | jq '.vulnerabilities | length // 0')
              echo "snyk-vulns=$VULN_COUNT" >> $GITHUB_OUTPUT
            fi
          else
            echo "Snyk token not configured"
          fi

      - name: Run OWASP Dependency Check
        id: owasp-deps
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'ran-automation-agentdb'
          path: '.'
          format: 'JSON'
          out: 'dependency-check-reports'
        continue-on-error: true

      - name: Aggregate vulnerability counts
        id: vulnerabilities
        run: |
          NPM_VULNS=$(echo '${{ steps.npm-audit.outputs.audit-output }}' | jq '.vulnerabilities | length // 0')
          SNYK_VULNS="${{ steps.snyk-deps.outputs.snyk-vulns || 0 }}"

          TOTAL_VULNS=$((NPM_VULNS + SNYK_VULNS))
          echo "count=$TOTAL_VULNS" >> $GITHUB_OUTPUT

          # Count high severity
          NPM_HIGH=$(echo '${{ steps.npm-audit.outputs.audit-output }}' | jq '[.vulnerabilities[] | select(.severity == "high" or .severity == "critical")] | length // 0')
          echo "high=$NPM_HIGH" >> $GITHUB_OUTPUT

      - name: Upload dependency security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: dependency-security-reports
          path: |
            snyk-report.json
            dependency-check-reports/
          retention-days: ${{ env.REPORT_RETENTION_DAYS }}

  # Static Application Security Testing (SAST)
  static-security:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    needs: security-config
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: typescript
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:typescript"

      - name: Run Semgrep SAST scan
        id: semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/typescript
          config-file-path: .semgrep.yml
          generate-sarif: true
          output: semgrep-report.json
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Run ESLint security rules
        run: |
          npx eslint src/**/*.ts \
            --config .eslintrc.security.js \
            --format=json \
            --output-file=eslint-security-report.json || true

      - name: Run TypeScript security analysis
        run: |
          npx typescript-eslint --project tsconfig.json \
            --plugin @typescript-eslint \
            --ext .ts \
            --format json \
            --output-file ts-security-report.json || true

      - name: Upload SAST reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: sast-reports
          path: |
            semgrep-report.sarif
            semgrep-report.json
            eslint-security-report.json
            ts-security-report.json
            .codeql/
          retention-days: ${{ env.REPORT_RETENTION_DAYS }}

  # Container Security Scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [security-config, static-security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build container image for scanning
        run: |
          docker build -t security-scan:${{ github.sha }} .
          docker tag security-scan:${{ github.sha }} security-scan:latest

      - name: Run Trivy vulnerability scanner
        id: trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'security-scan:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: '${{ needs.security-config.outputs.severity-threshold }}'

      - name: Run Grype vulnerability scanner
        id: grype
        uses: anchore/scan-action@v3
        with:
          image: 'security-scan:latest'
          format: 'sarif'
          output: 'grype-results.sarif'
          fail-build: 'false'

      - name: Run Docker Scout
        id: docker-scout
        env:
          DOCKER_SCOUT_TOKEN: ${{ secrets.DOCKER_SCOUT_TOKEN }}
        run: |
          if [[ -n "$DOCKER_SCOUT_TOKEN" ]]; then
            echo "${DOCKER_SCOUT_TOKEN}" | docker scout login
            docker scout cves --image security-scan:latest --format sarif > docker-scout-results.sarif || true
          else
            echo "Docker Scout token not configured"
          fi

      - name: Run container configuration best practices check
        run: |
          # Check for security best practices in Dockerfile
          echo "🔍 Container Security Best Practices Check:"

          # Check for non-root user
          if grep -q "USER.*" Dockerfile; then
            echo "✅ Non-root user configured"
          else
            echo "❌ No non-root user found in Dockerfile"
          fi

          # Check for minimal base image
          if grep -q "alpine\|distroless\|slim" Dockerfile; then
            echo "✅ Minimal base image detected"
          else
            echo "⚠️ Consider using minimal base image (alpine, distroless, etc.)"
          fi

          # Check for security updates
          if grep -q "RUN.*apt.*update\|yum.*update" Dockerfile; then
            echo "✅ Security updates configured"
          else
            echo "⚠️ Consider adding security update steps"
          fi

      - name: Upload container security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: container-security-reports
          path: |
            trivy-results.sarif
            grype-results.sarif
            docker-scout-results.sarif
          retention-days: ${{ env.REPORT_RETENTION_DAYS }}

  # Infrastructure Security Scanning
  infrastructure-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    needs: security-config
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Terraform security scan (if applicable)
        id: terraform-scan
        if: hashFiles('**/*.tf') != ''
        run: |
          # Install tfsec
          curl -sSfL https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | sh

          # Run tfsec scan
          ./bin/tfsec --format json --out tfsec-results.json . || true

          # Run checkov
          pip install checkov
          checkov -d . -o json -o cli -o sarif --output-file-path checkov-results || true

      - name: Run Kubernetes security scan
        id: k8s-scan
        if: hashFiles('k8s/**/*.yaml') != ''
        run: |
          # Install kube-score
          wget https://github.com/zegl/kube-score/releases/download/v1.13.1/kube-score_1.13.1_linux_amd64.tar.gz
          tar xzf kube-score_1.13.1_linux_amd64.tar.gz

          # Run kube-score
          ./kube-score score k8s/**/*.yaml --output-format ci --output-file kube-score-results.txt || true

          # Install and run polaris
          docker run --rm -v $(pwd):/polaris fairwindsops/polaris:latest audit --config-file /polaris/polaris.yaml --output-file /polaris/polaris-results.json /polaris/k8s || true

      - name: Run Helm security scan (if applicable)
        id: helm-scan
        if: hashFiles('**/*.yaml') != ''
        run: |
          # Install helm
          curl https://get.helm.sh/helm-v3.10.0-linux-amd64.tar.gz | tar xz
          sudo mv linux-amd64/helm /usr/local/bin/

          # Run helm security scan
          helm plugin install https://github.com/quay/helm-plugin-push.git || true
          helm template . --debug > helm-template.yaml

          # Run kube-linter
          docker run --rm -v $(pwd):/data stackrox/kube-linter lint /data/helm-template.yaml || true

      - name: Check for hardcoded secrets
        id: secrets-scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Upload infrastructure security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: infrastructure-security-reports
          path: |
            tfsec-results.json
            checkov-results.*
            kube-score-results.txt
            polaris-results.json
            trufflehog-results.json
          retention-days: ${{ env.REPORT_RETENTION_DAYS }}

  # Software Bill of Materials (SBOM)
  sbom-generation:
    name: Generate SBOM
    runs-on: ubuntu-latest
    needs: [security-config, dependency-security]
    if: needs.security-config.outputs.generate-sbom == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Generate CycloneDX SBOM
        run: |
          npm install -g @cyclonedx/cdxgen
          cdxgen --type application --output sbom-cyclonedx.json .

          # Validate SBOM
          npm install -g @cyclonedx/bom
          cyclonedx validate sbom-cyclonedx.json || echo "SBOM validation warnings"

      - name: Generate SPDX SBOM
        run: |
          docker build -t sbom-generator:${{ github.sha }} .
          docker run --rm -v $(pwd):/app sbom-generator:${{ github.sha }} \
            syft /app -o spdx-json > sbom-spdx.json || true

      - name: Generate dependency tree SBOM
        run: |
          npm ls --json --depth=inf > npm-dependency-tree.json
          node -e "
            const tree = JSON.parse(require('fs').readFileSync('npm-dependency-tree.json', 'utf8'));
            const sbom = {
              'bomFormat': 'CycloneDX',
              'specVersion': '1.4',
              'serialNumber': 'urn:uuid:' + require('crypto').randomUUID(),
              'version': 1,
              'metadata': {
                'timestamp': new Date().toISOString(),
                'tools': [{'name': 'npm-ls', 'version': 'builtin'}]
              },
              'components': []
            };
            require('fs').writeFileSync('sbom-npm.json', JSON.stringify(sbom, null, 2));
          "

      - name: Analyze SBOM for vulnerabilities
        run: |
          # Install OWASP Dependency Track analyzer
          wget https://github.com/DependencyTrack/dependency-track/releases/download/v4.8.0/dt-cli.jar

          # Analyze SBOM (requires DT instance)
          if [[ -n "${{ secrets.DT_BASE_URL }}" && -n "${{ secrets.DT_API_KEY }}" ]]; then
            java -jar dt-cli.jar \
              --project "RAN Automation AgentDB" \
              --upload sbom-cyclonedx.json \
              --base-url "${{ secrets.DT_BASE_URL }}" \
              --api-key "${{ secrets.DT_API_KEY }}" || true
          fi

      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v3
        with:
          name: sbom-artifacts
          path: |
            sbom-*.json
            npm-dependency-tree.json
          retention-days: ${{ env.REPORT_RETENTION_DAYS }}

  # Security Compliance Check
  compliance-check:
    name: Security Compliance Check
    runs-on: ubuntu-latest
    needs: [security-config, dependency-security, static-security, container-security, infrastructure-security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all security reports
        uses: actions/download-artifact@v3
        with:
          path: security-reports/

      - name: Generate compliance report
        run: |
          npm install -g @securecodewarrior/github-compliance-action

          # Generate compliance report
          node -e "
            const fs = require('fs');
            const path = require('path');

            const complianceReport = {
              'scanDate': new Date().toISOString(),
              'repository': '${{ github.repository }}',
              'commit': '${{ github.sha }}',
              'branch': '${{ github.ref_name }}',
              'compliance': {
                'owaspTop10': true,
                'dependencyScanning': true,
                'codeScanning': true,
                'containerScanning': true,
                'infrastructureScanning': true
              },
              'findings': {},
              'overallScore': 0
            };

            // Analyze SAST results
            const sastPath = 'security-reports/sast-reports';
            if (fs.existsSync(sastPath)) {
              const semgrepReport = JSON.parse(fs.readFileSync(path.join(sastPath, 'semgrep-report.json'), 'utf8') || '{}');
              complianceReport.findings.sast = {
                'totalFindings': semgrepReport.results?.length || 0,
                'highSeverity': semgrepReport.results?.filter(r => r.metadata.severity === 'ERROR').length || 0
              };
            }

            // Analyze dependency results
            const depPath = 'security-reports/dependency-security-reports';
            if (fs.existsSync(depPath) && fs.existsSync(path.join(depPath, 'snyk-report.json'))) {
              const snykReport = JSON.parse(fs.readFileSync(path.join(depPath, 'snyk-report.json'), 'utf8') || '{}');
              complianceReport.findings.dependencies = {
                'totalVulnerabilities': snykReport.vulnerabilities?.length || 0,
                'highSeverity': snykReport.vulnerabilities?.filter(v => ['high', 'critical'].includes(v.severity)).length || 0
              };
            }

            // Calculate overall score
            let totalFindings = 0;
            let highSeverityFindings = 0;

            Object.values(complianceReport.findings).forEach(finding => {
              totalFindings += finding.totalFindings || 0;
              highSeverityFindings += finding.highSeverity || 0;
            });

            complianceReport.overallScore = Math.max(0, 100 - (highSeverityFindings * 10) - (totalFindings * 2));

            fs.writeFileSync('compliance-report.json', JSON.stringify(complianceReport, null, 2));

            console.log('🔒 Compliance Report Generated:');
            console.log('Overall Score:', complianceReport.overallScore);
            console.log('Total Findings:', totalFindings);
            console.log('High Severity Findings:', highSeverityFindings);
          "

      - name: Validate compliance thresholds
        run: |
          node -e "
            const report = JSON.parse(require('fs').readFileSync('compliance-report.json', 'utf8'));
            const MINIMUM_SCORE = 80;

            if (report.overallScore < MINIMUM_SCORE) {
              console.log('❌ Compliance score below threshold:', report.overallScore, '<', MINIMUM_SCORE);
              process.exit(1);
            } else {
              console.log('✅ Compliance score acceptable:', report.overallScore);
            }
          "

      - name: Upload compliance report
        uses: actions/upload-artifact@v3
        with:
          name: security-compliance-report
          path: compliance-report.json
          retention-days: ${{ env.REPORT_RETENTION_DAYS }}

  # Security Pipeline Summary
  security-summary:
    name: Security Pipeline Summary
    runs-on: ubuntu-latest
    needs: [security-config, dependency-security, static-security, container-security, infrastructure-security, sbom-generation, compliance-check]
    if: always()
    steps:
      - name: Security Pipeline Summary
        run: |
          echo "## 🔒 Phase 4 Security Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Level:** ${{ needs.security-config.outputs.scan-level }}" >> $GITHUB_STEP_SUMMARY
          echo "**Severity Threshold:** ${{ needs.security-config.outputs.severity-threshold }}" >> $GITHUB_STEP_SUMMARY
          echo "**Fail on High:** ${{ needs.security-config.outputs.fail-on-high }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 🛡️ Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "| Security Layer | Status | Findings |" >> $GITHUB_STEP_SUMMARY
          echo "|----------------|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ${{ needs.dependency-security.result }} | ${{ needs.dependency-security.outputs.vuln-count || 0 }} vulns |" >> $GITHUB_STEP_SUMMARY
          echo "| Static Analysis | ${{ needs.static-security.result }} | CodeQL + Semgrep + ESLint |" >> $GITHUB_STEP_SUMMARY
          echo "| Container Security | ${{ needs.container-security.result }} | Trivy + Grype + Docker Scout |" >> $GITHUB_STEP_SUMMARY
          echo "| Infrastructure | ${{ needs.infrastructure-security.result }} | Terraform + Kubernetes + Secrets |" >> $GITHUB_STEP_SUMMARY
          echo "| SBOM Generation | ${{ needs.sbom-generation.result }} | CycloneDX + SPDX |" >> $GITHUB_STEP_SUMMARY
          echo "| Compliance Check | ${{ needs.compliance-check.result }} | Score analysis |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.dependency-security.result }}" == "success" && "${{ needs.static-security.result }}" == "success" ]]; then
            echo "✅ **Security pipeline completed successfully! No critical issues detected.**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Security pipeline completed with findings. Please review the security reports.**" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Security Reports Available" >> $GITHUB_STEP_SUMMARY
          echo "- Dependency vulnerability reports" >> $GITHUB_STEP_SUMMARY
          echo "- Static analysis (SAST) results" >> $GITHUB_STEP_SUMMARY
          echo "- Container security scans" >> $GITHUB_STEP_SUMMARY
          echo "- Infrastructure security assessments" >> $GITHUB_STEP_SUMMARY
          echo "- Software Bill of Materials (SBOM)" >> $GITHUB_STEP_SUMMARY
          echo "- Compliance validation report" >> $GITHUB_STEP_SUMMARY

  # Security Notifications
  security-notify:
    name: Security Notifications
    runs-on: ubuntu-latest
    needs: [security-config, dependency-security, compliance-check]
    if: always() && (needs.dependency-security.result == 'failure' || needs.compliance-check.result == 'failure')
    steps:
      - name: Notify security team on findings
        if: needs.dependency-security.outputs.high > 0 || failure()
        uses: 8398a7/action-slack@v3
        with:
          status: warning
          channel: '#security'
          text: |
            🔒 *Security Pipeline Alert*

            📦 Repository: ${{ github.repository }}
            🌿 Branch: ${{ github.ref_name }}
            🔍 High Severity Findings: ${{ needs.dependency-security.outputs.high || 0 }}
            📊 Compliance Status: ${{ needs.compliance-check.result }}

            🚨 Immediate attention required for security findings.

            View details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}

      - name: Create security issue for critical findings
        if: needs.dependency-security.outputs.high > 0
        uses: actions/github-script@v6
        with:
          script: |
            const highVulns = ${{ needs.dependency-security.outputs.high }};

            if (highVulns > 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🔒 Security: ${highVulns} High Severity Vulnerabilities Detected`,
                body: `
                ## Security Vulnerability Alert

                **Repository:** ${{ github.repository }}
                **Branch:** ${{ github.ref_name }}
                **Commit:** ${{ github.sha }}

                **High Severity Vulnerabilities:** ${highVulns}

                **Security Pipeline:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

                ### Action Required

                1. Review the security scan results
                2. Update affected dependencies
                3. Test and validate fixes
                4. Deploy updated version

                ---
                This issue was automatically created by the Phase 4 Security Pipeline.
                `,
                labels: ['security', 'high-priority', 'dependencies']
              });
            }