[
  {
    "$meta": {
      "version": "1.5.0",
      "description": "Activation PMR VPN avec SPID multiples",
      "author": [
        "Valentin LEBOURG Ext DTSI/DTR <valentin.lebourg.ext@orange.com>",
        "Nicolas BOURASSEAU DTSI/DTR <nicolas.bourasseau@orange.com>"
      ]
    }
  },
  {
    "$vars": {
      "already_fetch": false,
      "spid_value": [
        "3"
      ],
      "noria_result": [],
      "dns_to_process": []
    }
  },
  {
    "$custom": [
      {
        "name": "create_pm_flex_counter",
        "args": [
          "spid_value_list"
        ],
        "body": [
          "flex_to_create = {}",
          "for spid_value in spid_value_list:",
          "    params = {'spidFilterMax': spid_value, 'spidFilterMin': spid_value, 'spidFilterEnabled': 'true'}",
          "    flex_to_create.update({f'PmFlexCounterFilter-spid_{spid_value}': params})",
          "return flex_to_create"
        ]
      },
      {
        "name": "is_pmr",
        "args": [
          "cell"
        ],
        "body": [
          "query = 'SELECT ECI, NCI FROM champs_ihm_noria WHERE EVENEMENTIEL = \"JO Venue\";'",
          "if vars.already_fetch:",
          "    return str(cell.cell_id) in vars.noria_result",
          "try:",
          "    with db.noria as my_db:",
          "        noria_export_result = my_db.query(query)",
          "        query_result = noria_export_result[0]",
          "    for row in query_result:",
          "        cell_id = row[0] or row[1]",
          "        vars.noria_result.append(str(cell_id))",
          "    return str(cell.cell_id) in vars.noria_result",
          "except Exception as e:",
          "    LOGGER.error(e)",
          "    return False",
          "finally:",
          "    vars.already_fetch = True"
        ]
      },
      {
        "name": "is_lte",
        "args": [
          "mo"
        ],
        "body": [
          "return bool(mo.get_children('ENodeBFunction'))"
        ]
      },
      {
        "name": "is_nr",
        "args": [
          "mo"
        ],
        "body": [
          "return bool(mo.get_children('GNBDUFunction'))"
        ]
      },
      {
        "name": "set_parameter_with_lock_unlock",
        "args": [
          "mo",
          "param",
          "value"
        ],
        "body": [
          "if getattr(mo, param) != value:",
          "    dns = [cell.dn]",
          "    if 'EUtranCellFDD' not in mo.dn:",
          "        dns.extend([c.dn for c in cell.parent().get_children('EUtranCellFDD')])",
          "    vars.dns_to_process.extend(dns)",
          "    return value",
          "return '__ignore__'"
        ]
      },
      {
        "name": "process_change_status",
        "args": [
          "changed_status"
        ],
        "body": [
          "for dn in set(vars.dns_to_process):",
          "    for status, plan_name in changed_status.items():",
          "        enet.set_mo_params(dn, {'administrativeState': status}, **{'plan': plan_name})",
          "vars.dns_to_process = []"
        ]
      }
    ]
  },
  {
    "$cond": {
      "if": "custom.is_pmr(cell)",
      "then": [
        {
          "$comment": "PMR cell",
          "$plans": {
            "Create_ResourcePartitions_and_FlexCounter": [
              {
                "ENodeBFunction": {
                  "$eval": "custom.create_pm_flex_counter(vars.spid_value)",
                  "ResourcePartitions-1": {
                    "ResourcePartition-LEGACY": {
                      "partitionId": {
                        "$eval": "custom.set_parameter_with_lock_unlock(mo, 'partitionId', '1')"
                      }
                    },
                    "ResourcePartition-PMR": {
                      "partitionId": {
                        "$eval": "custom.set_parameter_with_lock_unlock(mo, 'partitionId', '2')"
                      },
                      "spidList": {
                        "$eval": "custom.set_parameter_with_lock_unlock(mo, 'spidList', vars.spid_value)"
                      }
                    },
                    "gbrPartitioning": "true"
                  },
                  "QciTable-default": {
                    "QciProfilePredefined-default,qci{1,5,7,8,65,69,70}": {
                      "paPartitionOverride": "true"
                    }
                  }
                }
              },
              {
                "GNBDUFunction": {
                  "@ResourceAllocationPolicies-1": {
                    "ResourceAllocationPolicy-PMR": {
                      "spectrumShareDl": "20",
                      "spectrumShareUl": "20",
                      "userLabel": "ratio_20"
                    }
                  },
                  "@ResourcePartitions-PMR": {
                    "ResourcePartition-PMR": {
                      "related5qiTableRef": "",
                      "resourcePartitionName": "spid",
                      "ResourcePartitionMember-PMR": {
                        "trafficCategory": "ENDC",
                        "endpointResourceRef": "",
                        "spidRfspList": {
                          "$eval": "vars.spid_value"
                        },
                        "pLMNIdList": [
                          {
                            "mcc": "208",
                            "mnc": "01"
                          }
                        ]
                      }
                    }
                  }
                }
              }
            ],
            "Create_ResourcePartitionGroupMember_and_PartitionMapping": [
              {
                "ENodeBFunction": {
                  "@ResourcePartitionGroup-PMR_L700_L800": {
                    "ResourcePartitionGroupMember-LEGACY": {
                      "resourcePartitionRef": {
                        "$eval": "custom.set_parameter_with_lock_unlock(mo, 'resourcePartitionRef', f'{mo.parent(2).dn}/ResourcePartitions-1/ResourcePartition-LEGACY')"
                      },
                      "resourcePartitionShare": {
                        "$eval": "custom.set_parameter_with_lock_unlock(mo, 'resourcePartitionShare', '50')"
                      }
                    },
                    "ResourcePartitionGroupMember-PMR": {
                      "resourcePartitionRef": {
                        "$eval": "custom.set_parameter_with_lock_unlock(mo, 'resourcePartitionRef', f'{mo.parent(2).dn}/ResourcePartitions-1/ResourcePartition-PMR')"
                      },
                      "resourcePartitionShare": {
                        "$eval": "custom.set_parameter_with_lock_unlock(mo, 'resourcePartitionShare', '50')"
                      }
                    }
                  },
                  "@ResourcePartitionGroup-PMR_L2100": {
                    "ResourcePartitionGroupMember-LEGACY": {
                      "resourcePartitionRef": {
                        "$eval": "custom.set_parameter_with_lock_unlock(mo, 'resourcePartitionRef', f'{mo.parent(2).dn}/ResourcePartitions-1/ResourcePartition-LEGACY')"
                      },
                      "resourcePartitionShare": {
                        "$eval": "custom.set_parameter_with_lock_unlock(mo, 'resourcePartitionShare', '67')"
                      }
                    },
                    "ResourcePartitionGroupMember-PMR": {
                      "resourcePartitionRef": {
                        "$eval": "custom.set_parameter_with_lock_unlock(mo, 'resourcePartitionRef', f'{mo.parent(2).dn}/ResourcePartitions-1/ResourcePartition-PMR')"
                      },
                      "resourcePartitionShare": {
                        "$eval": "custom.set_parameter_with_lock_unlock(mo, 'resourcePartitionShare', '33')"
                      }
                    }
                  },
                  "@ResourcePartitionGroup-PMR_L1800_L2600": {
                    "ResourcePartitionGroupMember-LEGACY": {
                      "resourcePartitionRef": {
                        "$eval": "custom.set_parameter_with_lock_unlock(mo, 'resourcePartitionRef', f'{mo.parent(2).dn}/ResourcePartitions-1/ResourcePartition-LEGACY')"
                      },
                      "resourcePartitionShare": {
                        "$eval": "custom.set_parameter_with_lock_unlock(mo, 'resourcePartitionShare', '75')"
                      }
                    },
                    "ResourcePartitionGroupMember-PMR": {
                      "resourcePartitionRef": {
                        "$eval": "custom.set_parameter_with_lock_unlock(mo, 'resourcePartitionRef', f'{mo.parent(2).dn}/ResourcePartitions-1/ResourcePartition-PMR')"
                      },
                      "resourcePartitionShare": {
                        "$eval": "custom.set_parameter_with_lock_unlock(mo, 'resourcePartitionShare', '25')"
                      }
                    }
                  }
                }
              },
              {
                "GNBDUFunction": {
                  "@ResourceAllocationPolicies-1": {
                    "@CellResourceMapping-PMR": {
                      "PartitionMapping-PMR": {
                        "caPartition": "false",
                        "partitionId": "1",
                        "partitionMappingName": "partition_PMR",
                        "priorityPartition5qiList": [],
                        "resourceAllocationPolicyRef": {
                          "$eval": "f'{mo.parent(3).dn}/ResourceAllocationPolicies-1/ResourceAllocationPolicy-PMR'"
                        },
                        "resourcePartitionRef": {
                          "$eval": "f'{mo.parent(3).dn}/ResourcePartitions-PMR/ResourcePartition-PMR'"
                        }
                      }
                    }
                  }
                }
              }
            ],
            "Assign_Cells_resourcePartitionGroup_and_Check_FeatureState": [
              {
                "EUtranCellFDD": {
                  "resourcePartitionGroupRef": {
                    "$switch": {
                      "branches": [
                        {
                          "case": "cell.get_freq_str() in ['9310', '6400']",
                          "then": {
                            "$eval": "custom.set_parameter_with_lock_unlock(mo, 'resourcePartitionGroupRef', f'{mo.parent().dn}/ResourcePartitionGroup-PMR_L700_L800')"
                          }
                        },
                        {
                          "case": "cell.get_freq_str() == '524'",
                          "then": {
                            "$eval": "custom.set_parameter_with_lock_unlock(mo, 'resourcePartitionGroupRef', f'{mo.parent().dn}/ResourcePartitionGroup-PMR_L2100')"
                          }
                        },
                        {
                          "case": "cell.get_freq_str() in ['3000', '1300']",
                          "then": {
                            "$eval": "custom.set_parameter_with_lock_unlock(mo, 'resourcePartitionGroupRef', f'{mo.parent().dn}/ResourcePartitionGroup-PMR_L1800_L2600')"
                          }
                        }
                      ]
                    }
                  }
                }
              },
              {
                "NRCellDU": {
                  "cellResourceMappingRef": {
                    "$eval": "f'{mo.parent().dn}/ResourceAllocationPolicies-1/CellResourceMapping-PMR'"
                  },
                  "nrRrpEnabled": "true"
                }
              },
              {
                "ManagedElement": {
                  "$switch": {
                    "branches": [
                      {
                        "case": "custom.is_lte(mo) and custom.is_nr(mo)",
                        "then": {
                          "SystemFunctions-1": {
                            "Lm-1": {
                              "FeatureState-CXC4012599": {
                                "featureState": "ACTIVATED"
                              },
                              "FeatureState-CXC4012559": {
                                "featureState": "ACTIVATED"
                              },
                              "FeatureState-CXC4012019": {
                                "featureState": "ACTIVATED"
                              }
                            }
                          }
                        }
                      },
                      {
                        "case": "custom.is_lte(mo)",
                        "then": {
                          "SystemFunctions-1": {
                            "Lm-1": {
                              "FeatureState-CXC4012019": {
                                "featureState": "ACTIVATED"
                              }
                            }
                          }
                        }
                      },
                      {
                        "case": "custom.is_nr(mo)",
                        "then": {
                          "SystemFunctions-1": {
                            "Lm-1": {
                              "FeatureState-CXC4012599": {
                                "featureState": "ACTIVATED"
                              },
                              "FeatureState-CXC4012559": {
                                "featureState": "ACTIVATED"
                              }
                            }
                          }
                        }
                      }
                    ]
                  }
                }
              }
            ]
          }
        },
        {
          "$eval": "custom.process_change_status({'LOCKED': 'Lock_Cells', 'UNLOCKED': 'Unlock_Cells'})"
        }
      ]
    }
  }
]
