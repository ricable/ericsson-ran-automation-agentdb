/**
 * AgentDB CLI Command Handlers
 *
 * Handles all AgentDB vector database commands for the CLI
 */
/**
 * Handle AgentDB command
 */
export async function handleAgentDBCommand(args) {
    const command = args[0];
    if (!command || command === 'help') {
        printAgentDBHelp();
        return;
    }
    // Import AgentDB CLI
    const { createAgentDBCLI } = await import('agentdb/reasoningbank/cli/commands');
    // Create AgentDB CLI instance
    const program = createAgentDBCLI();
    // Run command with proper args
    const cliArgs = ['node', 'agentdb', ...args];
    await program.parseAsync(cliArgs);
}
/**
 * Print AgentDB help
 */
function printAgentDBHelp() {
    console.log(`
üóÑÔ∏è  AgentDB - Ultra-Fast Vector Database for ReasoningBank

USAGE:
  npx agentic-flow agentdb <command> [options]

COMMANDS:
  init                    Initialize AgentDB database
  insert                  Insert pattern with embedding
  search                  Search for similar patterns
  train                   Train learning model on experiences
  stats                   Display database statistics
  optimize                Optimize database (consolidation, pruning)
  update <id>             Update pattern statistics
  delete <id>             Delete pattern
  migrate                 Migrate from legacy ReasoningBank
  export                  Export patterns to JSON
  import <file>           Import patterns from JSON

INIT:
  npx agentic-flow agentdb init [options]

  Options:
    -p, --path <path>       Database path (default: .agentdb/reasoningbank.db)
    --dimension <dim>       Embedding dimension (default: 768)

INSERT:
  npx agentic-flow agentdb insert [options]

  Options:
    -e, --embedding <json>  Embedding vector (JSON array)
    -d, --domain <domain>   Domain name
    -p, --pattern <json>    Pattern data (JSON)
    -c, --confidence <val>  Confidence (0-1, default: 0.5)

SEARCH:
  npx agentic-flow agentdb search [options]

  Options:
    -q, --query <json>      Query embedding (JSON array)
    -l, --limit <n>         Result limit (default: 10)
    -d, --domain <domain>   Filter by domain
    --min-confidence <val>  Minimum confidence

TRAIN:
  npx agentic-flow agentdb train [options]

  Options:
    -e, --epochs <n>        Number of epochs (default: 50)
    -b, --batch-size <n>    Batch size (default: 32)

STATS:
  npx agentic-flow agentdb stats

  Displays:
    ‚Ä¢ Total patterns
    ‚Ä¢ Total trajectories
    ‚Ä¢ Average confidence
    ‚Ä¢ Domains
    ‚Ä¢ Database size

OPTIMIZE:
  npx agentic-flow agentdb optimize

  Performs:
    ‚Ä¢ Pattern consolidation (95%+ similarity)
    ‚Ä¢ Low-quality pattern pruning
    ‚Ä¢ Database reindexing
    ‚Ä¢ Space optimization

UPDATE:
  npx agentic-flow agentdb update <id> [options]

  Options:
    -c, --confidence <val>  New confidence value
    -u, --usage <n>         Usage count
    -s, --success <n>       Success count

DELETE:
  npx agentic-flow agentdb delete <id>

MIGRATE:
  npx agentic-flow agentdb migrate [options]

  Options:
    -s, --source <path>     Source database path (legacy)
    -d, --destination <p>   Destination path (default: .agentdb/reasoningbank.db)

  Automatically:
    ‚Ä¢ Creates backup of source database
    ‚Ä¢ Migrates all patterns and trajectories
    ‚Ä¢ Validates migration
    ‚Ä¢ Zero data loss guarantee

EXPORT:
  npx agentic-flow agentdb export [options]

  Options:
    -o, --output <file>     Output file (default: patterns.json)
    -d, --domain <domain>   Filter by domain

IMPORT:
  npx agentic-flow agentdb import <file>

EXAMPLES:
  # Initialize database
  npx agentic-flow agentdb init --path .agentdb/reasoningbank.db

  # Search similar patterns
  npx agentic-flow agentdb search --query '[0.1, 0.2, ...]' --limit 10

  # Train learning model
  npx agentic-flow agentdb train --epochs 50 --batch-size 32

  # Get statistics
  npx agentic-flow agentdb stats

  # Optimize database
  npx agentic-flow agentdb optimize

  # Migrate from legacy
  npx agentic-flow agentdb migrate --source .swarm/memory.db

  # Export patterns
  npx agentic-flow agentdb export --output patterns.json --domain code-generation

  # Import patterns
  npx agentic-flow agentdb import patterns.json

PERFORMANCE:
  ‚Ä¢ Pattern Search: 150x faster (100¬µs vs 15ms)
  ‚Ä¢ Batch Insert: 500x faster (2ms vs 1s)
  ‚Ä¢ Large-scale: 12,500x faster (8ms vs 100s at 1M patterns)
  ‚Ä¢ Memory: 4-32x reduction with quantization

FEATURES:
  ‚úÖ HNSW Vector Indexing - O(log n) search complexity
  ‚úÖ 9 Learning Algorithms - Decision Transformer, Q-Learning, etc.
  ‚úÖ 4 Reasoning Agents - Pattern Matching, Context Synthesis, etc.
  ‚úÖ QUIC Synchronization - Multi-agent memory sync
  ‚úÖ Quantization - Binary (32x), Scalar (4x), Product (8-16x)
  ‚úÖ 100% Backward Compatible - Drop-in replacement

DOCUMENTATION:
  Integration Guide: docs/AGENTDB_INTEGRATION.md
  API Reference: packages/agentdb/docs/integration/IMPLEMENTATION_SUMMARY.md
  GitHub: https://github.com/ruvnet/agentic-flow/tree/main/packages/agentdb
`);
}
